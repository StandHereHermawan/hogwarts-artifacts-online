package edu.tcu.cs.hogwarts_artifact_online.artifact;

import edu.tcu.cs.hogwarts_artifact_online.wizard.Wizard;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

import static org.assertj.core.api.Assertions.catchThrowable;
import static org.junit.jupiter.api.Assertions.assertEquals;

import static org.mockito.BDDMockito.given;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
class ArtifactServiceTest {

    @Mock
    ArtifactRepository artifactRepository;

    @InjectMocks
    ArtifactService artifactService;

    @BeforeEach
    void setUp() {
    }

    @AfterEach
    void tearDown() {
    }

    @Test
    void testUsingMockingFindByIdSuccessBehavior() {
        ///
        /// Given. (Start of the "Given" step Section)
        ///
        /// Arrange Input and targets.
        /// Define the behavior of mock object artifactRepository.
        ///
        /// Code Below are Fake Data Generated by Mock.
        ///
        /// <pre>
        /// <blockquote>
        ///
        ///     "id": "1250808601744904192",
        ///     "name": "Invisibility Cloak",
        ///     "description": "An invisibility cloak is used to make the wearer invisible.",
        ///     "imageUrl": "ImageUrl",
        ///
        /// </blockquote>
        /// </pre>
        ///
        Wizard wizardMock1 = new Wizard();
        wizardMock1.setId(2);
        wizardMock1.setName("Terry Davis");
        ///
        Artifact artifactMock1 = new Artifact();
        artifactMock1.setId("1250808601744904192");
        artifactMock1.setName("Invisibility Cloak");
        artifactMock1.setDescription("An invisibility cloak is used to make the wearer invisible.");
        artifactMock1.setImageUrl("ImageUrl");
        artifactMock1.setOwner(wizardMock1);
        ///
        /// Defines the behavior of the mock object
        ///
        /// Using 'given' methods or function from 'org.mockito.BDDMockito.given' package.
        /// Mocking the success behavior of 'findById' method in artifactRepository object.
        given(artifactRepository
                .findById(artifactMock1.getId()))
                .willReturn(Optional.of(artifactMock1));
        /// (End of the "Given" step Section)
        ///


        ///
        /// When. (Start of the "When" step Section)
        /// Act on the target behavior.
        /// "When" steps should cover the method to be tested.
        ///
        /// Test the success behavior 'findById' method in artifactService object.
        Artifact returnedMockArtifactObject = artifactService.findById(artifactMock1.getId());
        /// (End of the "When" step Section)
        ///


        ///
        /// Then. (Start of the "When" step Section)
        /// Assert expected outcomes.
        ///
        /// Using 'assertThat' methods or function from 'org.assertj.core.api.Assertions.assertThat' package.
        assertThat(returnedMockArtifactObject.getId()).isEqualTo(artifactMock1.getId());
        assertThat(returnedMockArtifactObject.getName()).isEqualTo(artifactMock1.getName());
        assertThat(returnedMockArtifactObject.getDescription()).isEqualTo(artifactMock1.getDescription());
        assertThat(returnedMockArtifactObject.getImageUrl()).isEqualTo(artifactMock1.getImageUrl());
        ///
        /// Using 'verify' methods or function from 'org.mockito.Mockito.verify' package.
        verify(artifactRepository, times(1)).findById(artifactMock1.getId());
        ///
        /// Using 'assertEquals' methods or function from 'org.junit.jupiter.api.Assertions.assertEquals' package.
        assertEquals(returnedMockArtifactObject.getId(), artifactMock1.getId());
        assertEquals(returnedMockArtifactObject.getName(), artifactMock1.getName());
        assertEquals(returnedMockArtifactObject.getDescription(), artifactMock1.getDescription());
        assertEquals(returnedMockArtifactObject.getImageUrl(), artifactMock1.getImageUrl());
        /// (End of the "When" step Section)
        ///

    }

    @Test
    void testUsingMockingFindByIdNotFoundBehavior() {
        ///
        /// "Given" step.
        ///
        /// Mocking the fail behavior from findById method in artifactRepository object.
        given(artifactRepository
                .findById(Mockito.any(String.class)))
                .willReturn(Optional.empty());
        /// String contains artifactId that doesnt exist.
        String artifactId = "12345";
        /// End of "Given" step.
        ///


        ///
        /// "When" step.
        Throwable exceptionThrown = catchThrowable(() -> artifactService.findById(artifactId));
        /// End of "When" step.
        ///


        ///
        /// "Then" step.
        assertThat(exceptionThrown)
                .isInstanceOf(ArtifactNotFoundException.class)
                .hasMessage("Could not found artifact with Id " + artifactId + " :(");
        verify(artifactRepository, times(1)).findById(artifactId);
        /// End of "Then" step.
        ///
    }
}